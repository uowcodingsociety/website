name: Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          if [ -d ~/website/.git ]; then
            echo "Repository exists, pulling latest changes..."
            cd ~/website/
            git pull origin main
          else
            echo "Repository doesn't exist, cloning..."
            rm -rf ~/website/
            git clone https://github.com/${{ github.repository }} ~/website/
            cd ~/website/
          fi

    - name: Create environment file
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/website/
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" > .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env

    - name: Install dependencies
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/website/
          pip install -r requirements.txt

    - name: Validate database
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/website/
          FLASK_APP=codesoc.py flask db-validate

    - name: Reset database
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/website/
          FLASK_APP=codesoc.py flask db-reset
